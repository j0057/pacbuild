#!/bin/bash

set -euo pipefail

_msg1() { local N=$1; shift; echo -e "\e[1;36m[$N] $@\e[0m"; }
_msg2() { local N=$1; shift; echo -e "\e[1;32m[$N] $@\e[0m"; }
_msg3() { local N=$1; shift; echo -e "\e[1;31m[$N] $@\e[0m"; }

_cmd()  { local N=$1; shift; _msg1 "$N" "$@";      "$@"; }
_sudo() { local N=$1; shift; _msg3 "$N" "$@"; sudo "$@"; }

if [ -f pacbuild.conf ]; then
    . pacbuild.conf
    : ${NAME:?NAME not set}
    : ${LIB:?LIB path not set}
else
    _msg3 config 'error: no pacbuild.conf in current directory' >&2
    exit 1
fi

export SRCDEST="$LIB/src"
export PKGDEST="$LIB/pkg"
export LOGDEST="$LIB/log"

init_repository() {
    if [ ! -f "$PKGDEST/$NAME.db.tar.gz" ]; then
        _cmd repo mkdir -p "$PKGDEST"
        _cmd repo tar cfT "$PKGDEST/$NAME.db.tar.gz" /dev/null
        _cmd repo ln -s "$NAME.db.tar.gz" "$PKGDEST/$NAME.db"
        _sudo repo pacman -Syy
    fi
    if [ ! -d "$SRCDEST" ]; then
        _cmd repo mkdir -p "$SRCDEST"
    fi
    if [ ! -d "$LOGDEST" ]; then
        _cmd repo mkdir -p "$LOGDEST"
    fi
}

prepare_chroot() {
    if [ ! -d "$LIB/build" ]; then
        _cmd root mkdir -p "$LIB/build"
        _cmd root mkarchroot -C /etc/pacman.conf "$LIB/build/root" base-devel devtools
    fi
    _cmd root arch-nspawn "$LIB/build/root" pacman -Syu --noprogress --color never --noconfirm
}

list_aur_packages() {
    git ls-files -s \
        | awk '$1=="160000"{print $4}'
}

get_srcinfo() {
    if [ ! -f "$1/.SRCINFO" -o "$1/PKGBUILD" -nt "$1/.SRCINFO" ]; then
        (cd "$1"; makepkg --printsrcinfo >.SRCINFO)
    fi
    cat "$1/.SRCINFO"
}

get_package_version() {
    get_srcinfo "$1" \
        | awk '$1=="pkgver"{pkgver=$3}
               $1=="pkgrel"{pkgrel=$3}
               $1=="epoch"{epoch=$3}
               END{print epoch (epoch ? ":" : "") pkgver "-" pkgrel}'
}

get_package_filenames() {
    get_srcinfo "$1" \
        | awk '$1=="pkgver"{pkgver=$3}
               $1=="pkgrel"{pkgrel=$3}
               $1=="epoch"{epoch=$3}
               $1=="arch"&&$3=="any"{arch=$3}
               /^pkgname = /{print $3 "-" epoch (epoch ? ":" : "") pkgver "-" pkgrel "-" arch ".pkg.tar.zst"}' \
               arch="$(uname -m)"
}

package_is_up_to_date() {
    local pkgfile result=0
    for pkgfile in $(get_package_filenames "$1"); do
        if [ ! -f "$PKGDEST/$pkgfile" ]; then
            _msg1 "$1" "missing $pkgfile"
            result=1
        fi
    done
    return $result
}

build_packages() {
    local pkg pkgfile
    for pkg in $(list_aur_packages); do
        # skip if package file is already there
        if package_is_up_to_date "$pkg"; then
            _msg2 "$pkg" "skipping: already have version $(get_package_version "$pkg")"
            continue
        fi

        # download sources, and as a side effect, update the pkgver= line for VCS packages
        (cd "$pkg"; _cmd "$pkg" makepkg --nodeps --nobuild)

        # given the new version number, skip if package file is already there
        if package_is_up_to_date "$pkg"; then
            _msg2 "$pkg" "skipping: already have version $(get_package_version "$pkg")"
            continue
        fi

        # build package
        _msg1 "$pkg" "building version $(get_package_version "$pkg")"
        (cd "$pkg"; _cmd "$pkg" makechrootpkg -c -r "$LIB/build")

        # add new package file to repo
        for pkgfile in $(get_package_filenames "$pkg"); do
            _cmd "$pkg" repo-add --new --remove "$PKGDEST/$NAME.db.tar.gz" "$PKGDEST/$pkgfile"
        done

        # clean any leftover files and undo changes to PKGBUILD
        if [[ -n `git status --porcelain` ]]; then
            _cmd "$pkg" git -C "$pkg" clean -dxf
            _cmd "$pkg" git -C "$pkg" checkout -- PKGBUILD
        fi

        # refresh pacman sync database
        _sudo "$pkg" pacman -Syy --noprogress --color never
    done
}

init_repository
prepare_chroot
build_packages
