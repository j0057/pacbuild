#!/bin/bash

set -euo pipefail

# TODO: configuration
REPO=$PWD/pkg
NAME=aur64
ROOT=$PWD/abs

# XXX: how to deal with GPG keys?
#      for example: gpg --keyserver keys.openpgp.org --recv-keys 3A5CA953F73C700D
#      https://blog.bastelfreak.de/2016/05/creating-a-reliable-arch-linux-package-build-environment/
#      ==> okay, this took only 4 hours, but: import the fk'in key into my own gpg dir.
#          that's it. that's the whole trick. i'm going to kill a puppy now.

_cmd() { echo "[*] $@"; "$@"; }
_sudo() { echo "[!] $@"; sudo "$@"; }

init_repository() {
    if [ ! -f "$REPO/$NAME.db.tar.gz" ]; then
        _cmd mkdir -p "$REPO"
        _cmd tar cfT "$REPO/$NAME.db.tar.gz" /dev/null
        _cmd ln -s "$NAME.db.tar.gz" "$REPO/$NAME.db"
        _sudo pacman -Syy
    fi
}

prepare_chroot() {
    if [ ! -d "$ROOT" ]; then
        _cmd mkdir -p "$ROOT"
        _cmd mkarchroot -C /etc/pacman.conf "$ROOT/root" base-devel
    fi
    _cmd arch-nspawn "$ROOT/root" pacman -Syu
}

list_aur_packages() {
    git ls-files -s \
        | awk '$1=="160000"{print $4}'
}

get_srcinfo() {
    if [ ! -f "$1/.SRCINFO" ]; then
        (cd "$1"; makepkg --printsrcinfo >.SRCINFO)
    fi
    cat "$1/.SRCINFO"
}

get_package_version() {
    get_srcinfo "$1" \
        | awk '$1=="pkgver"{pkgver=$3}
               $1=="pkgrel"{pkgrel=$3}
               END{print pkgver "-" pkgrel}'
}

get_package_filenames() {
    get_srcinfo "$1" \
        | awk '$1=="pkgver"{pkgver=$3}
               $1=="pkgrel"{pkgrel=$3}
               /^pkgname = /{print $3 "-" pkgver "-" pkgrel "-" arch ".pkg.tar.zst"}' \
               arch="$(uname -m)"
}

package_is_up_to_date() {
    local pkgfile result
    result=0
    for pkgfile in $(get_package_filenames "$1"); do
        if [ ! -f "$REPO/$pkgfile" ]; then
            echo "[$1] missing $pkgfile"
            result=1
        fi
    done
    [ $result = 0 ]
}

build_package() {
    cd "$1"
    _cmd makechrootpkg -c -r "$ROOT"
}

build_packages() {
    for pkg in $(list_aur_packages); do
        if package_is_up_to_date "$pkg"; then
            echo "[$pkg] already have version $(get_package_version "$pkg"). skipping!"
            continue
        fi

        echo "[$pkg] building $(get_package_version "$pkg")"
        (build_package "$pkg")

        for pkgfile in $(get_package_filenames "$pkg"); do
            _cmd cp "$pkg/$pkgfile" "$REPO"
            _cmd repo-add --new --remove "$REPO/$NAME.db.tar.gz" "$REPO/$pkgfile"
        done

        _sudo pacman -Syy
    done
}

clean_packages() {
    for pkg in $(list_aur_packages); do
        echo "[$pkg] cleaning"
        (cd $pkg; git clean -dxf)
    done
}

init_repository
prepare_chroot
build_packages
clean_packages
